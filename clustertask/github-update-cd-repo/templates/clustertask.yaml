apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: {{ include "stakater-github-update-cd-repo.name" . }}
spec:
  workspaces:
    - name: source
  params:
    - name: IMAGE_TAG
      description: Reference of the image tag.
      type: string
    - name: IMAGE_NAME
      description: Reference of the image name.
      type: string
    - name: PR_NUMBER
      description: In case of PR, PR number that is to be used in image tag. If this field is empty it means that it's a commit on main branch
      default: "NA"
    - name: REPO_PATH
      description: Path of repository with group name
      default: "NA"
    - name: GIT_REVISION
      description: The git revision
    - name: TEAM
      description: The git revision
      default: "NA"
    - name: CLUSTER_NAME
      description: The git revision
      default: "NA"
    - name: NAMESPACE
      description: Namespace for deployment
    - name: ENVIRONMENT
      description: Name of ENVIRONMENT
    - name: HELM_REGISTRY
      description: Url of helm registry
    - name: CD_REPO_URL
      description: Url for gitops (cd) repo
  steps:
    - name: update-cd-repo
      image: stakater/pipeline-toolbox:v0.0.20
      command: ["/bin/bash"]
      workingDir: $(workspaces.source.path)
      env:
        - name: HELM_REG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: nexus-helm-auth-forked
              optional: true
        - name: HELM_REG_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: nexus-helm-auth-forked
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: stakater-tekton-bot
              key: password
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: stakater-tekton-bot
              key: username
        - name: GIT_EMAIL
          valueFrom:
            secretKeyRef:
              name: stakater-tekton-bot
              key: email
        - name: cd_repo_ssh_token
          valueFrom:
            secretKeyRef:
              name: cd-repo-ssh-token
              key: token
      args:
        - '-c'
        - >
          set -e
          # Get the cd repo to clone
          # Find the protocol
          PROTOCOL=$(echo $params.CD_REPO_URL| cut -d @ -f1 | cut -d : -f1)

          string=$(params.CD_REPO_URL)
          REPO_NAME_WITH_ORG=${string#*$".com"} 
          REPO_NAME_WITH_ORG=${REPO_NAME_WITH_ORG:1}
          GIT_ORGANIZATION=$(echo $REPO_NAME_WITH_ORG | cut -d'/' -f1)
          CD_REPO_NAME=$(echo $REPO_NAME_WITH_ORG | cut -d'/' -f2)

          if [ $PROTOCOL == "https" ]; then
          
          git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/$(GIT_ORGANIZATION)/$(CD_REPO_NAME)
          
          git config --global user.password ${GIT_PASSWORD}
          
          git config --global user.name ${GIT_USERNAME}
          
          git config --global user.email ${GIT_EMAIL}
          
          else
          
          git config --global user.name tekton-bot
<<<<<<< Updated upstream
          git config --global user.email stakater-tekton-bot@stakater.com
=======
          
          git config --global user.email asfa@stakater.com
          
>>>>>>> Stashed changes
          mkdir ~/.ssh
          
          ls -a ~/
          
          > ~/.ssh/id_rsa
          
          > ~/.ssh/known_hosts
          
          ls -a ~/.ssh
          
          echo "$cd_repo_ssh_token" >> ~/.ssh/id_rsa
          
          eval `ssh-agent -s`
          
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          
          chmod 600  ~/.ssh/id_rsa
          
          ssh-add ~/.ssh/id_rsa
          
          git config --global core.sshCommand 'ssh -o StrictHostKeyChecking=no'
          
          git clone $(params.CD_REPO_URL)
          
          fi

          url=$CD_REPO_NAME suffix=.git
          
          CD_REPO_NAME=${url%"$suffix"}
          
          cd $CD_REPO_NAME
          
          if [ "$(params.TEAM)" != "NA" ]; then
            TEAM=$(params.TEAM)
          else
            TEAM=$(echo $(params.NAMESPACE) | cut -d'-' -f 1)
          fi
          
          echo "Team is ${TEAM}"
          
          export REPO=$(echo $(params.REPO_PATH) | rev | cut -d'/' -f 1 | rev )
          
          echo "Repo is ${REPO}"
          
          echo "Adding nexus helm repo $(params.HELM_REGISTRY)"
          
          helm repo add nexus $(params.HELM_REGISTRY) --username ${HELM_REG_USER} --password ${HELM_REG_PASSWORD}

          cd *$TEAM
          
          cd *$REPO

          if [ "$(params.PR_NUMBER)" != "NA" ]; then
            echo "Creating test ENVIRONMENT for PR-$(params.PR_NUMBER)"
            cd *preview
            cp $(workspaces.source.path)/environment/environment.yaml pr-$(params.PR_NUMBER).yaml
            set +e
            git add .
            git commit -m "Add/Update ENVIRONMENT for ${REPO} pr - $(params.PR_NUMBER)"
            set -e
          elif [ $(params.PR_NUMBER) == "NA" ] && ( [ $(params.GIT_REVISION) ==
          "main" ] || [ $(params.GIT_REVISION) == "master" ] ); then
            echo "Updating chart for repo ${REPO}"
            echo "Repo ${IMAGE_NAME}"
            echo "Tag $(params.IMAGE_NAME)"
            echo "Updating values file in $(params.ENVIRONMENT)"
            # Update Chart.yaml
            yq e -i '.dependencies[0].version = "$(params.IMAGE_TAG)"' $(params.ENVIRONMENT)/Chart.yaml
            yq e -i '.version = "$(params.IMAGE_TAG)"' $(params.ENVIRONMENT)/Chart.yaml
            # Update values.yaml
            UPDATE_PATH=".$REPO.application.deployment.image.repository" yq e -i 'eval(strenv(UPDATE_PATH)) = "$(params.IMAGE_NAME)"'  $(params.ENVIRONMENT)/values.yaml
            UPDATE_PATH=".$REPO.application.deployment.image.tag" yq e -i 'eval(strenv(UPDATE_PATH)) =  "$(params.IMAGE_TAG)"'  $(params.ENVIRONMENT)/values.yaml
            echo "File updated:"
            set +e
            git add .
            git commit -m "Updating values for ${REPO} $(params.ENVIRONMENT)"
            set -e
          fi
          set +e
          git push
          for I in {1..5}
          do
           if [ $? -ne 0 ]
            then
              echo "Error on Push"
              echo "Pulling via Rebase"
              git pull --rebase
              echo "Pushing"
              git push
            else
              break
            fi
          done
