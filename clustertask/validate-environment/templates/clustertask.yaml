apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: {{ include "stakater-validate-environment.name" . }}
  annotations:
    description: |
      Validate Helm Release Status of Tronodor Environment
spec:
  workspaces:
  - name: source
  params:
    - name: environmentName
      description: Time in seconds to wait for environment
      default: ""
    - name: waitTimeForEnvironment
      description: Time in seconds to wait for environment
      default: "120"
    - name: retryInterval
      description: Time in seconds to get environment and check statuses
      default: "5"
  steps:
  - name: push-main-tag
    image: stakater/pipeline-toolbox:v0.0.20
    command: ["/bin/bash"]
    workingDir: $(workspaces.source.path)
    args:
      - -c
      - |
        if [ $(params.environmentName) != "" ]; then
          # Get Environment from task param
          environmentName="$(params.environmentName)"
        else
          # Get Environment Name from environment file generated by create environment task
          environmentName=$(yq .metadata.name $(workspaces.source.path)/environment/environment.yaml )
        fi
        echo "Checking Environment $environmentName"

        # Wait Until Timeout
        for (( t=1; t < $(params.waitTimeForEnvironment); t++ ))
        do
          # Get Environment Status
          environmentStatus=$(oc get environment $environmentName -o jsonpath='{.status}')

          # Get Fields to check Environment Reconcilation
          condition_type=$(echo $environmentStatus | jq -r '.resourceStatus.conditions[0].type')
          condition_status=$(echo $environmentStatus | jq -r '.resourceStatus.conditions[0].status')

          # Check Environment Reconcilation 
          if ([ $condition_type == "ReconcileSuccess" ] && [ $condition_status == "True" ]); then
            echo "--Environment Reconciled"
            echo "  Checking HelmRelease"

            # Get Fields to check HelmRelease status 
            helmrelease_type=$(echo $environmentStatus | jq -r '.helmReleaseStatus.latestCondition.type')
            helmrelease_status=$(echo $environmentStatus | jq -r '.helmReleaseStatus.latestCondition.status')
            #echo "  HelmReleaseStatus:$helmrelease_status"
            #echo "  HelmReleaseType:$helmrelease_type"

            # Check HelmRelease status
            if ([ $helmrelease_type == "Released" ] && [ $helmrelease_status == "True" ]); then
              echo "---HelmRelease succesful"
              echo "   Status:" "$helmrelease_status"
              echo "   Type:" "$helmrelease_type"
              echo "   Message" "$(echo $environmentStatus | jq  '.helmReleaseStatus.latestCondition.message')"
              echo "   Reason" "$(echo $environmentStatus | jq  '.helmReleaseStatus.latestCondition.reason')"
              break
            else
              echo "---HelmRelease Unsuccesful"
              echo "   Status:" "$helmrelease_status"
              echo "   Type:" "$helmrelease_type"
              echo "   Message" "$(echo $environmentStatus | jq  '.helmReleaseStatus.latestCondition.message')"
              echo "   Reason" "$(echo $environmentStatus | jq  '.helmReleaseStatus.latestCondition.reason')"
          fi
          else
            echo " Environment Not Reconciled"
          fi

          sleep $(params.retryInterval) && echo ""
        done
