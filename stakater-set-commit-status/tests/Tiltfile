load('ext://helm_resource', 'helm_resource', 'helm_repo')

settings = read_json('../tilt-settings.json', default={})
helm_registry_user = settings.get("helm_registry_user")
helm_registry_pwd = settings.get("helm_registry_pwd")

# if settings.get("allow_k8s_contexts"):
#   allow_k8s_contexts(settings.get("allow_k8s_contexts"))
allow_k8s_contexts('stakater-actions-runner-controller/kubernetes-default-svc:443/system:serviceaccount:stakater-actions-runner-controller:actions-runner-controller-runner-deployment')

# Add helm repos
helm_repo('stakater', 'https://stakater.github.io/stakater-charts')
# helm_repo('bitnami', 'https://charts.bitnami.com/bitnami')

# Install Pipelines Operator
pipelines_operator_namespace = "rh-openshift-pipelines-operator"

# local('helm registry login ghcr.io --username={} --password={}'.format(helm_registry_user, helm_registry_pwd))

# Allows a maximum of one resources to update
update_settings (max_parallel_updates = 1)  

# Install Pipelines Operator chart
local_resource(
    'rh-openshift-pipelines-operator', 
    cmd='helm install rh-openshift-pipelines-operator oci://ghcr.io/stakater/charts/rh-openshift-pipelines-operator'
    )

# Install Pipelines Instance chart, a tektonConfig CR which installs Tekton CRDs
local_resource(
    'rh-openshift-pipelines-instance', 
    cmd='helm install rh-openshift-pipelines-instance oci://ghcr.io/stakater/charts/rh-openshift-pipelines-instance',
    resource_deps=[
        'rh-openshift-pipelines-operator'
    ])

# Waits for Tekton CRDs to become available before creating CRs
local_resource(
    'wait-for-crds', 
    cmd='timeout 300s bash -c "until kubectl wait --for condition=Established crd/clustertasks.tekton.dev && kubectl wait --for condition=Established crd/taskruns.tekton.dev; do sleep 10; done"'
    )

# Create Clustertask
local_resource(
    'clustertask', 
    cmd='helm install clustertask ../helm',
    resource_deps=[
        'wait-for-crds'
    ])

# Create TaskRun with hardcoded values to test Clustertask
k8s_yaml(['raw-manifests/taskrun.yaml','raw-manifests/serviceaccount.yaml'])

# Categorize resources
k8s_resource(
    objects=['stakater-set-commit-status:taskrun', 'pipeline:serviceaccount'],
    new_name='TaskRun'
)

# Check if TaskRun is created
local_resource(
    'check_taskrun',
    cmd='timeout 120s bash -c "until kubectl wait taskrun/stakater-set-commit-status -n rh-openshift-pipelines-instance --for=jsonpath=\'{.status.conditions[*].type}\'=Succeeded; do sleep 10; done"',
    resource_deps=[
        'TaskRun'
    ]) 

# Run script to test if TaskRun was successful, exit with non-zero code if fails
local_resource(
    'run script',
    cmd='bash ./taskrun_script.sh',
    resource_deps=[
        'check_taskrun'
    ]) 