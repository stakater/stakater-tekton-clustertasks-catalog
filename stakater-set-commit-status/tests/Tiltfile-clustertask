settings = read_json('../tilt-settings.json', default={})

if settings.get("allow_k8s_contexts"):
  allow_k8s_contexts(settings.get("allow_k8s_contexts"))

# Allows a maximum of one resources to update
update_settings (max_parallel_updates = 1)

# Create Clustertask
local_resource(
    'clustertask', 
    cmd='helm install clustertask ../helm'
    )

# Create git-token Secret 
local_resource(
    'create-secret', 
    cmd="kubectl create secret generic git-token --from-literal=token={} -n rh-openshift-pipelines-instance".format(str(local('echo -n $TEST_GIT_REPO_SECRET')))
    )

# Create TaskRun & ServiceAccount with hardcoded values to test Clustertask
k8s_yaml(['raw-manifests/taskrun.yaml','raw-manifests/serviceaccount.yaml'])

# Categorize resources
k8s_resource(
    objects=['stakater-set-commit-status:taskrun', 'pipeline:serviceaccount'],
    new_name='TaskRun'
)

# Wait until TaskRun is created
local_resource(
    'check_taskrun',
    cmd="timeout 120s bash -c 'until kubectl wait taskrun/stakater-set-commit-status -n rh-openshift-pipelines-instance --for=jsonpath=\'{.status.conditions[*].type}\'=Succeeded; do sleep 10; done'",
    resource_deps=[
        'TaskRun'
    ])

# Run script to test if TaskRun was successful, exit with non-zero code if fails
local_resource(
    'run_script',
    cmd="TASKNAME=stakater-set-commit-status bash ../../.github/scripts/taskrun-script.sh",
    resource_deps=[
        'check_taskrun'
    ])
