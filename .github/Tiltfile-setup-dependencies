load('ext://namespace', 'namespace_create', 'namespace_inject')
settings = read_json('../tilt-settings.json', default={})

if settings.get("allow_k8s_contexts"):
  allow_k8s_contexts(settings.get("allow_k8s_contexts"))

# Allows a maximum of one resources to update
update_settings (max_parallel_updates = 1)  

operator_namespace= "rh-openshift-pipelines-operator"
instance_namespace= "rh-openshift-pipelines-instance"

# Create pipelines operator namespace
namespace_create(operator_namespace)
k8s_resource(
    objects=['rh-openshift-pipelines-operator:namespace'],
    new_name='operator_namespace'
)

# Install Pipelines Operator chart
local_resource(
    'rh-openshift-pipelines-operator', 
    cmd='helm install rh-openshift-pipelines-operator oci://ghcr.io/stakater/charts/rh-openshift-pipelines-operator -n {}'.format(operator_namespace),
    resource_deps=[
        'operator_namespace'
    ])

# Wait until Pipelines Operator deployment is in available state
local_resource(
    'wait-for-pipelines-operator-installation',
    cmd="timeout 300s bash -c 'until kubectl wait --for condition=available deployment/openshift-pipelines-operator -n rh-openshift-pipelines-operator; do sleep 10; done'",
    resource_deps=[
        'rh-openshift-pipelines-operator'
    ])

# Create pipelines instance namespace # pod-security.kubernetes.io/enforce: privileged
namespace_create(instance_namespace,labels=['pod-security.kubernetes.io/enforce: privileged'])
k8s_resource(
    objects=['rh-openshift-pipelines-instance:namespace'],
    new_name='instance_namespace',
    resource_deps=[
        'wait-for-pipelines-operator-installation'
    ])

# Install Pipelines Instance chart, a tektonConfig CR which installs Tekton CRDs
local_resource(
    'rh-openshift-pipelines-instance', 
    cmd='helm install rh-openshift-pipelines-instance oci://ghcr.io/stakater/charts/rh-openshift-pipelines-instance -n {}'.format(instance_namespace),
    resource_deps=[
        'instance_namespace'
    ])

# Wait until all tektonConfig resources are available
local_resource(
    'wait-for-pipelines-instance-installation', 
    cmd='timeout 300s bash -c "until kubectl wait --for condition=Ready tektonconfig/config; do sleep 10; done"',
    resource_deps=[
        'rh-openshift-pipelines-instance'
    ])

# Wait until ClusterTask CRD becomes available before creating CRs
local_resource(
    'wait-for-crds', 
    cmd='timeout 300s bash -c "until kubectl wait --for condition=Established crd/clustertasks.tekton.dev && kubectl wait --for condition=Established crd/taskruns.tekton.dev; do sleep 10; done"',
    resource_deps=[
        'wait-for-pipelines-instance-installation'
    ])